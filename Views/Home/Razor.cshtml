@{
    ViewData["Title"] = "Razor";
}
<h1 class="display-4">Синтаксис Razor</h1>
<p>
    <b>Razor</b> - технологія впровадження в HTML можливостей мови 
    програмування (C#). Умовно можливості Razor поділяються на вирази та 
    інструкції. Основу синтаксису складає символ  &commat;, через що до HTML цей 
    символ слід вставляти через сутність <b>&amp;commat;</b>.
    Однак Razor розпізнає адреси E-mail, у них цей символ замінювати не 
    треба: user@mail.net
</p>
<p>
    <b>Вирази</b> мають результат. Razor-вирази його відображають. Якщо вираз
    простий, наприклад, виведення змінної, то додаткових конструкцій не 
    треба, просто зазначається <code>&commat;x</code>, для більг складних 
    вживаються круглі дужки <code>&commat;(2 + 3)</code> @(2 + 3)
</p>
<p>
    <b>Інструкції</b> - без результату, який треба виводити. Інструкції 
    Razor беруться у фігурні дужки <code>&commat;{...}</code> У дужках 
    всі інструкції слідують синтаксису мови (C#). Змінні, оголошені у таких
    блоках, доступні по cshtml документу. Деякі інструкції можна не 
    обмежувати дужками, зокрема 
</p>
@{
    int x = 10;
    String str = "Hello";
}
<p>
<p>умовні конструкції <code>&commat;if</code><br/>
        @if (x < 10)
        {
                    <b>x &lt; 10</b>
        }
        else @if (x > 10)
        {
                    <b>x > 10</b>
        }
        else
        {
                    <b>x == 10</b>
        }
            <br/>У конструкціях такого типу Razor сам намагається визначитись з
            тим, що є інструкцією мови, а що - кодом HTML. Як правило, це 
            розпізнається за тегами.
        </p>
</p>
<p>
    Циклічні конструкції <code>&commat;while</code>
    <ul>
        @while(str.Length > 0)
        {
            <li>@str</li>
            str = str[..(str.Length - 1)];
        }
    </ul>
</p>
<p>
    Також у проєкті є "суперглобальні" масиви, за допомогою яких можна 
    передавати дані від контролера до представлення.
    ViewData["formController"] = @ViewData["formController"]

</p>